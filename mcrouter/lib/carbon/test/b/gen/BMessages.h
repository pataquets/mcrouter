/*
 *  Copyright (c) 2017-present, Facebook, Inc.
 *
 *  This source code is licensed under the MIT license found in the LICENSE
 *  file in the root directory of this source tree.
 *
 */

/*
 *  THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT; ALL CHANGES WILL BE LOST IN
 *  VAIN.
 *
 *  @generated
 */
#pragma once

#include <memory>
#include <string>
#include <utility>

#include <folly/Optional.h>
#include <folly/io/IOBuf.h>
#include <mcrouter/lib/carbon/CarbonProtocolReader.h>
#include <mcrouter/lib/carbon/CommonSerializationTraits.h>
#include <mcrouter/lib/carbon/Keys.h>
#include <mcrouter/lib/carbon/ReplyCommon.h>
#include <mcrouter/lib/carbon/RequestCommon.h>
#include <mcrouter/lib/carbon/RequestReplyUtil.h>
#include <mcrouter/lib/carbon/Result.h>
#include <mcrouter/lib/carbon/TypeList.h>
#include <mcrouter/lib/carbon/Variant.h>

#include "mcrouter/lib/carbon/test/a/b/gen/BMessages.h"

namespace carbon {
namespace test {

class BaseStruct {
 public:

  BaseStruct() = default;
  BaseStruct(const BaseStruct&) = default;
  BaseStruct& operator=(const BaseStruct&) = default;
  BaseStruct(BaseStruct&&) = default;
  BaseStruct& operator=(BaseStruct&&) = default;

  int64_t baseInt64Member() const {
    return baseInt64Member_;
  }
  int64_t& baseInt64Member() {
    return baseInt64Member_;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const int64_t&>
   baseInt64Member_ref() const& {
    return {this->baseInt64Member_, __isset.baseInt64Member};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<int64_t&>
   baseInt64Member_ref() & {
    return {this->baseInt64Member_, __isset.baseInt64Member};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<int64_t&&>
   baseInt64Member_ref() && {
      return {std::move(this->baseInt64Member_), __isset.baseInt64Member};
  }
  

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

 private:
  struct __isset {
    bool baseInt64Member;
  } __isset = {};

  int64_t baseInt64Member_{0};
};

class SimpleStruct {
 public:

  SimpleStruct() = default;
  SimpleStruct(const SimpleStruct&) = default;
  SimpleStruct& operator=(const SimpleStruct&) = default;
  SimpleStruct(SimpleStruct&&) = default;
  SimpleStruct& operator=(SimpleStruct&&) = default;

  BaseStruct& asBaseStruct() {
    return _carbon_basestruct_;
  }
  const BaseStruct& asBaseStruct() const {
    return _carbon_basestruct_;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const BaseStruct&>
   baseStruct_ref() const& {
    return {this->_carbon_basestruct_, __isset._carbon_basestruct_};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<BaseStruct&>
   baseStruct_ref() & {
    return {this->_carbon_basestruct_, __isset._carbon_basestruct_};
  }
  int64_t baseInt64Member() const {
    return _carbon_basestruct_.baseInt64Member();
  }
  int64_t& baseInt64Member() {
    return _carbon_basestruct_.baseInt64Member();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const int64_t&>
   baseInt64Member_ref() const& {
    return _carbon_basestruct_.baseInt64Member_ref();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<int64_t&>
   baseInt64Member_ref() & {
    return _carbon_basestruct_.baseInt64Member_ref();
  }
  int32_t int32Member() const {
    return int32Member_;
  }
  int32_t& int32Member() {
    return int32Member_;
  }
  const std::string& stringMember() const {
    return stringMember_;
  }
  std::string& stringMember() {
    return stringMember_;
  }
  const test2::util::SimpleEnum& enumMember() const {
    return enumMember_;
  }
  test2::util::SimpleEnum& enumMember() {
    return enumMember_;
  }
  const std::vector<test2::util::SimpleStruct>& vectorMember() const {
    return vectorMember_;
  }
  std::vector<test2::util::SimpleStruct>& vectorMember() {
    return vectorMember_;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const int32_t&>
   int32Member_ref() const& {
    return {this->int32Member_, __isset.int32Member};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<int32_t&>
   int32Member_ref() & {
    return {this->int32Member_, __isset.int32Member};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<int32_t&&>
   int32Member_ref() && {
      return {std::move(this->int32Member_), __isset.int32Member};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const std::string&>
   stringMember_ref() const& {
    return {this->stringMember_, __isset.stringMember};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::string&>
   stringMember_ref() & {
    return {this->stringMember_, __isset.stringMember};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::string&&>
   stringMember_ref() && {
      return {std::move(this->stringMember_), __isset.stringMember};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const test2::util::SimpleEnum&>
   enumMember_ref() const& {
    return {this->enumMember_, __isset.enumMember};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<test2::util::SimpleEnum&>
   enumMember_ref() & {
    return {this->enumMember_, __isset.enumMember};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<test2::util::SimpleEnum&&>
   enumMember_ref() && {
      return {std::move(this->enumMember_), __isset.enumMember};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const std::vector<test2::util::SimpleStruct>&>
   vectorMember_ref() const& {
    return {this->vectorMember_, __isset.vectorMember};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::vector<test2::util::SimpleStruct>&>
   vectorMember_ref() & {
    return {this->vectorMember_, __isset.vectorMember};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::vector<test2::util::SimpleStruct>&&>
   vectorMember_ref() && {
      return {std::move(this->vectorMember_), __isset.vectorMember};
  }
  

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

 private:
  struct __isset {
    bool _carbon_basestruct_;
    bool int32Member;
    bool stringMember;
    bool enumMember;
    bool vectorMember;
  } __isset = {};

  BaseStruct _carbon_basestruct_;
  std::string stringMember_;
  test2::util::SimpleEnum enumMember_{test2::util::SimpleEnum::Twenty};
  std::vector<test2::util::SimpleStruct> vectorMember_;
  int32_t int32Member_{0};
};
} // namespace test
} // namespace carbon

#include "BMessages-inl.h"
