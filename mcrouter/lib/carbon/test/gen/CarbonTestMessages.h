/*
 *  Copyright (c) 2017-present, Facebook, Inc.
 *
 *  This source code is licensed under the MIT license found in the LICENSE
 *  file in the root directory of this source tree.
 *
 */

/*
 *  THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT; ALL CHANGES WILL BE LOST IN
 *  VAIN.
 *
 *  @generated
 */
#pragma once

#include <memory>
#include <string>
#include <utility>

#include <folly/Optional.h>
#include <folly/io/IOBuf.h>
#include <mcrouter/lib/carbon/CarbonProtocolReader.h>
#include <mcrouter/lib/carbon/CommonSerializationTraits.h>
#include <mcrouter/lib/carbon/Keys.h>
#include <mcrouter/lib/carbon/ReplyCommon.h>
#include <mcrouter/lib/carbon/RequestCommon.h>
#include <mcrouter/lib/carbon/RequestReplyUtil.h>
#include <mcrouter/lib/carbon/Result.h>
#include <mcrouter/lib/carbon/TypeList.h>
#include <mcrouter/lib/carbon/Variant.h>

#include "mcrouter/lib/carbon/test/a/gen/AMessages.h"
#include "mcrouter/lib/network/gen/CommonMessages.h"

#include "mcrouter/lib/carbon/test/TestCastableToFollyDynamicType.h"
#include "mcrouter/lib/carbon/test/TestUserType.h"
#include "folly/container/F14Map.h"
#include "folly/container/F14Set.h"

namespace carbon {
namespace test {

class TestReply;

class TestRequest : public carbon::RequestCommon {
 public:
  using reply_type = TestReply;

  static constexpr size_t typeId = 69;
  static constexpr const char* name = "test";

  TestRequest() = default;
  TestRequest(const TestRequest&) = default;
  TestRequest& operator=(const TestRequest&) = default;
  TestRequest(TestRequest&&) = default;
  TestRequest& operator=(TestRequest&&) = default;
  explicit TestRequest(folly::StringPiece sp)
      : key_(sp) {}
  explicit TestRequest(folly::IOBuf&& carbonKey)
      : key_(std::move(carbonKey)) {}

  SimpleStruct& asBase() {
    markBufferAsDirty();
    return _carbon_simplestruct_;
  }
  const SimpleStruct& asBase() const {
    return _carbon_simplestruct_;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const SimpleStruct&>
   base_ref() const& {
    return {this->_carbon_simplestruct_, __isset._carbon_simplestruct_};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<SimpleStruct&>
   base_ref() & {
    return {this->_carbon_simplestruct_, __isset._carbon_simplestruct_};
  }
  BaseStruct& asBaseStruct() {
    markBufferAsDirty();
    return asBase().asBaseStruct();
  }
  const BaseStruct& asBaseStruct() const {
    return asBase().asBaseStruct();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const BaseStruct&>
   baseStruct_ref() const& {
    return base_ref()->baseStruct_ref();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<BaseStruct&>
   baseStruct_ref() & {
    return base_ref()->baseStruct_ref();
  }
  int32_t int32Member() const {
    return _carbon_simplestruct_.int32Member();
  }
  int32_t& int32Member() {
    markBufferAsDirty();
    return _carbon_simplestruct_.int32Member();
  }
  const std::string& stringMember() const {
    return _carbon_simplestruct_.stringMember();
  }
  std::string& stringMember() {
    markBufferAsDirty();
    return _carbon_simplestruct_.stringMember();
  }
  const test2::util::SimpleEnum& enumMember() const {
    return _carbon_simplestruct_.enumMember();
  }
  test2::util::SimpleEnum& enumMember() {
    markBufferAsDirty();
    return _carbon_simplestruct_.enumMember();
  }
  const std::vector<test2::util::SimpleStruct>& vectorMember() const {
    return _carbon_simplestruct_.vectorMember();
  }
  std::vector<test2::util::SimpleStruct>& vectorMember() {
    markBufferAsDirty();
    return _carbon_simplestruct_.vectorMember();
  }
  int64_t baseInt64Member() const {
    return _carbon_simplestruct_.baseInt64Member();
  }
  int64_t& baseInt64Member() {
    markBufferAsDirty();
    return _carbon_simplestruct_.baseInt64Member();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const int32_t&>
   int32Member_ref() const& {
    return _carbon_simplestruct_.int32Member_ref();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<int32_t&>
   int32Member_ref() & {
    return _carbon_simplestruct_.int32Member_ref();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const std::string&>
   stringMember_ref() const& {
    return _carbon_simplestruct_.stringMember_ref();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::string&>
   stringMember_ref() & {
    return _carbon_simplestruct_.stringMember_ref();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const test2::util::SimpleEnum&>
   enumMember_ref() const& {
    return _carbon_simplestruct_.enumMember_ref();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<test2::util::SimpleEnum&>
   enumMember_ref() & {
    return _carbon_simplestruct_.enumMember_ref();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const std::vector<test2::util::SimpleStruct>&>
   vectorMember_ref() const& {
    return _carbon_simplestruct_.vectorMember_ref();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::vector<test2::util::SimpleStruct>&>
   vectorMember_ref() & {
    return _carbon_simplestruct_.vectorMember_ref();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const int64_t&>
   baseInt64Member_ref() const& {
    return _carbon_simplestruct_.baseInt64Member_ref();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<int64_t&>
   baseInt64Member_ref() & {
    return _carbon_simplestruct_.baseInt64Member_ref();
  }
  const carbon::Keys<folly::IOBuf>& key() const {
    return key_;
  }
  carbon::Keys<folly::IOBuf>& key() {
    markBufferAsDirty();
    return key_;
  }
  const test2::util::SimpleEnum& testEnum() const {
    return testEnum_;
  }
  test2::util::SimpleEnum& testEnum() {
    markBufferAsDirty();
    return testEnum_;
  }
  bool testBool() const {
    return testBool_;
  }
  bool& testBool() {
    markBufferAsDirty();
    return testBool_;
  }
  char testChar() const {
    return testChar_;
  }
  char& testChar() {
    markBufferAsDirty();
    return testChar_;
  }
  int8_t testInt8() const {
    return testInt8_;
  }
  int8_t& testInt8() {
    markBufferAsDirty();
    return testInt8_;
  }
  int16_t testInt16() const {
    return testInt16_;
  }
  int16_t& testInt16() {
    markBufferAsDirty();
    return testInt16_;
  }
  int32_t testInt32() const {
    return testInt32_;
  }
  int32_t& testInt32() {
    markBufferAsDirty();
    return testInt32_;
  }
  int64_t testInt64() const {
    return testInt64_;
  }
  int64_t& testInt64() {
    markBufferAsDirty();
    return testInt64_;
  }
  uint8_t testUInt8() const {
    return testUInt8_;
  }
  uint8_t& testUInt8() {
    markBufferAsDirty();
    return testUInt8_;
  }
  uint16_t testUInt16() const {
    return testUInt16_;
  }
  uint16_t& testUInt16() {
    markBufferAsDirty();
    return testUInt16_;
  }
  uint32_t testUInt32() const {
    return testUInt32_;
  }
  uint32_t& testUInt32() {
    markBufferAsDirty();
    return testUInt32_;
  }
  uint64_t testUInt64() const {
    return testUInt64_;
  }
  uint64_t& testUInt64() {
    markBufferAsDirty();
    return testUInt64_;
  }
  float testFloat() const {
    return testFloat_;
  }
  float& testFloat() {
    markBufferAsDirty();
    return testFloat_;
  }
  double testDouble() const {
    return testDouble_;
  }
  double& testDouble() {
    markBufferAsDirty();
    return testDouble_;
  }
  const std::string& testShortString() const {
    return testShortString_;
  }
  std::string& testShortString() {
    markBufferAsDirty();
    return testShortString_;
  }
  const std::string& testLongString() const {
    return testLongString_;
  }
  std::string& testLongString() {
    markBufferAsDirty();
    return testLongString_;
  }
  const folly::IOBuf& testIobuf() const {
    return testIobuf_;
  }
  folly::IOBuf& testIobuf() {
    markBufferAsDirty();
    return testIobuf_;
  }
  const SimpleStruct& testStruct() const {
    return testStruct_;
  }
  SimpleStruct& testStruct() {
    markBufferAsDirty();
    return testStruct_;
  }
  const std::vector<std::string>& testList() const {
    return testList_;
  }
  std::vector<std::string>& testList() {
    markBufferAsDirty();
    return testList_;
  }
  const folly::Optional<std::string>& testOptionalString() const {
    return testOptionalString_;
  }
  folly::Optional<std::string>& testOptionalString() {
    markBufferAsDirty();
    return testOptionalString_;
  }
  const folly::Optional<folly::IOBuf>& testOptionalIobuf() const {
    return testOptionalIobuf_;
  }
  folly::Optional<folly::IOBuf>& testOptionalIobuf() {
    markBufferAsDirty();
    return testOptionalIobuf_;
  }
  const std::vector<test2::util::SimpleEnum>& testEnumVec() const {
    return testEnumVec_;
  }
  std::vector<test2::util::SimpleEnum>& testEnumVec() {
    markBufferAsDirty();
    return testEnumVec_;
  }
  const test2::util::SimpleUnion& testUnion() const {
    return testUnion_;
  }
  test2::util::SimpleUnion& testUnion() {
    markBufferAsDirty();
    return testUnion_;
  }
  const std::vector<std::vector<uint64_t>>& testNestedVec() const {
    return testNestedVec_;
  }
  std::vector<std::vector<uint64_t>>& testNestedVec() {
    markBufferAsDirty();
    return testNestedVec_;
  }
  const std::unordered_map<std::string, std::string>& testUMap() const {
    return testUMap_;
  }
  std::unordered_map<std::string, std::string>& testUMap() {
    markBufferAsDirty();
    return testUMap_;
  }
  const std::map<double, double>& testMap() const {
    return testMap_;
  }
  std::map<double, double>& testMap() {
    markBufferAsDirty();
    return testMap_;
  }
  const std::map<std::string, std::vector<uint16_t>>& testComplexMap() const {
    return testComplexMap_;
  }
  std::map<std::string, std::vector<uint16_t>>& testComplexMap() {
    markBufferAsDirty();
    return testComplexMap_;
  }
  const std::unordered_set<std::string>& testUSet() const {
    return testUSet_;
  }
  std::unordered_set<std::string>& testUSet() {
    markBufferAsDirty();
    return testUSet_;
  }
  const std::set<uint64_t>& testSet() const {
    return testSet_;
  }
  std::set<uint64_t>& testSet() {
    markBufferAsDirty();
    return testSet_;
  }
  const folly::Optional<bool>& testOptionalBool() const {
    return testOptionalBool_;
  }
  folly::Optional<bool>& testOptionalBool() {
    markBufferAsDirty();
    return testOptionalBool_;
  }
  const std::vector<folly::Optional<std::string>>& testOptionalVec() const {
    return testOptionalVec_;
  }
  std::vector<folly::Optional<std::string>>& testOptionalVec() {
    markBufferAsDirty();
    return testOptionalVec_;
  }
  const std::vector<folly::IOBuf>& testIOBufList() const {
    return testIOBufList_;
  }
  std::vector<folly::IOBuf>& testIOBufList() {
    markBufferAsDirty();
    return testIOBufList_;
  }
  const folly::F14FastMap<std::string, std::string>& testF14FastMap() const {
    return testF14FastMap_;
  }
  folly::F14FastMap<std::string, std::string>& testF14FastMap() {
    markBufferAsDirty();
    return testF14FastMap_;
  }
  const folly::F14NodeMap<std::string, std::string>& testF14NodeMap() const {
    return testF14NodeMap_;
  }
  folly::F14NodeMap<std::string, std::string>& testF14NodeMap() {
    markBufferAsDirty();
    return testF14NodeMap_;
  }
  const folly::F14ValueMap<std::string, std::string>& testF14ValueMap() const {
    return testF14ValueMap_;
  }
  folly::F14ValueMap<std::string, std::string>& testF14ValueMap() {
    markBufferAsDirty();
    return testF14ValueMap_;
  }
  const folly::F14VectorMap<std::string, std::string>& testF14VectorMap() const {
    return testF14VectorMap_;
  }
  folly::F14VectorMap<std::string, std::string>& testF14VectorMap() {
    markBufferAsDirty();
    return testF14VectorMap_;
  }
  const folly::F14FastSet<std::string>& testF14FastSet() const {
    return testF14FastSet_;
  }
  folly::F14FastSet<std::string>& testF14FastSet() {
    markBufferAsDirty();
    return testF14FastSet_;
  }
  const folly::F14NodeSet<std::string>& testF14NodeSet() const {
    return testF14NodeSet_;
  }
  folly::F14NodeSet<std::string>& testF14NodeSet() {
    markBufferAsDirty();
    return testF14NodeSet_;
  }
  const folly::F14ValueSet<std::string>& testF14ValueSet() const {
    return testF14ValueSet_;
  }
  folly::F14ValueSet<std::string>& testF14ValueSet() {
    markBufferAsDirty();
    return testF14ValueSet_;
  }
  const folly::F14VectorSet<std::string>& testF14VectorSet() const {
    return testF14VectorSet_;
  }
  folly::F14VectorSet<std::string>& testF14VectorSet() {
    markBufferAsDirty();
    return testF14VectorSet_;
  }
  apache::thrift::optional_field_ref<const std::string&> testOptionalKeywordString() const& {
    return {this->testOptionalKeywordString_, __isset.testOptionalKeywordString};
  }
  apache::thrift::optional_field_ref<std::string&> testOptionalKeywordString() & {
    markBufferAsDirty();
    return {this->testOptionalKeywordString_, __isset.testOptionalKeywordString};
  }
  apache::thrift::optional_field_ref<std::string&&> testOptionalKeywordString() && {
    markBufferAsDirty();
     return {std::move(this->testOptionalKeywordString_), __isset.testOptionalKeywordString};
  }
  
  apache::thrift::optional_field_ref<const folly::IOBuf&> testOptionalKeywordIobuf() const& {
    return {this->testOptionalKeywordIobuf_, __isset.testOptionalKeywordIobuf};
  }
  apache::thrift::optional_field_ref<folly::IOBuf&> testOptionalKeywordIobuf() & {
    markBufferAsDirty();
    return {this->testOptionalKeywordIobuf_, __isset.testOptionalKeywordIobuf};
  }
  apache::thrift::optional_field_ref<folly::IOBuf&&> testOptionalKeywordIobuf() && {
    markBufferAsDirty();
     return {std::move(this->testOptionalKeywordIobuf_), __isset.testOptionalKeywordIobuf};
  }
  
  apache::thrift::optional_field_ref<const bool&> testOptionalKeywordBool() const& {
    return {this->testOptionalKeywordBool_, __isset.testOptionalKeywordBool};
  }
  apache::thrift::optional_field_ref<bool&> testOptionalKeywordBool() & {
    markBufferAsDirty();
    return {this->testOptionalKeywordBool_, __isset.testOptionalKeywordBool};
  }
  apache::thrift::optional_field_ref<bool&&> testOptionalKeywordBool() && {
    markBufferAsDirty();
     return {std::move(this->testOptionalKeywordBool_), __isset.testOptionalKeywordBool};
  }
  
  const CastableToFollyDynamicType& testCastable() const {
    return testCastable_;
  }
  CastableToFollyDynamicType& testCastable() {
    markBufferAsDirty();
    return testCastable_;
  }
  const UserType& testType() const {
    return testType_;
  }
  UserType& testType() {
    markBufferAsDirty();
    return testType_;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const carbon::Keys<folly::IOBuf>&>
   key_ref() const& {
    return {this->key_, __isset.key};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<carbon::Keys<folly::IOBuf>&>
   key_ref() & {
    return {this->key_, __isset.key};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<carbon::Keys<folly::IOBuf>&&>
   key_ref() && {
      return {std::move(this->key_), __isset.key};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const test2::util::SimpleEnum&>
   testEnum_ref() const& {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<test2::util::SimpleEnum&>
   testEnum_ref() & {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<test2::util::SimpleEnum&&>
   testEnum_ref() && {
      return {std::move(this->testEnum_), __isset.testEnum};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const bool&>
   testBool_ref() const& {
    return {this->testBool_, __isset.testBool};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<bool&>
   testBool_ref() & {
    return {this->testBool_, __isset.testBool};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<bool&&>
   testBool_ref() && {
      return {std::move(this->testBool_), __isset.testBool};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const char&>
   testChar_ref() const& {
    return {this->testChar_, __isset.testChar};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<char&>
   testChar_ref() & {
    return {this->testChar_, __isset.testChar};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<char&&>
   testChar_ref() && {
      return {std::move(this->testChar_), __isset.testChar};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const int8_t&>
   testInt8_ref() const& {
    return {this->testInt8_, __isset.testInt8};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<int8_t&>
   testInt8_ref() & {
    return {this->testInt8_, __isset.testInt8};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<int8_t&&>
   testInt8_ref() && {
      return {std::move(this->testInt8_), __isset.testInt8};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const int16_t&>
   testInt16_ref() const& {
    return {this->testInt16_, __isset.testInt16};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<int16_t&>
   testInt16_ref() & {
    return {this->testInt16_, __isset.testInt16};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<int16_t&&>
   testInt16_ref() && {
      return {std::move(this->testInt16_), __isset.testInt16};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const int32_t&>
   testInt32_ref() const& {
    return {this->testInt32_, __isset.testInt32};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<int32_t&>
   testInt32_ref() & {
    return {this->testInt32_, __isset.testInt32};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<int32_t&&>
   testInt32_ref() && {
      return {std::move(this->testInt32_), __isset.testInt32};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const int64_t&>
   testInt64_ref() const& {
    return {this->testInt64_, __isset.testInt64};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<int64_t&>
   testInt64_ref() & {
    return {this->testInt64_, __isset.testInt64};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<int64_t&&>
   testInt64_ref() && {
      return {std::move(this->testInt64_), __isset.testInt64};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const uint8_t&>
   testUInt8_ref() const& {
    return {this->testUInt8_, __isset.testUInt8};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<uint8_t&>
   testUInt8_ref() & {
    return {this->testUInt8_, __isset.testUInt8};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<uint8_t&&>
   testUInt8_ref() && {
      return {std::move(this->testUInt8_), __isset.testUInt8};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const uint16_t&>
   testUInt16_ref() const& {
    return {this->testUInt16_, __isset.testUInt16};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<uint16_t&>
   testUInt16_ref() & {
    return {this->testUInt16_, __isset.testUInt16};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<uint16_t&&>
   testUInt16_ref() && {
      return {std::move(this->testUInt16_), __isset.testUInt16};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const uint32_t&>
   testUInt32_ref() const& {
    return {this->testUInt32_, __isset.testUInt32};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<uint32_t&>
   testUInt32_ref() & {
    return {this->testUInt32_, __isset.testUInt32};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<uint32_t&&>
   testUInt32_ref() && {
      return {std::move(this->testUInt32_), __isset.testUInt32};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const uint64_t&>
   testUInt64_ref() const& {
    return {this->testUInt64_, __isset.testUInt64};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<uint64_t&>
   testUInt64_ref() & {
    return {this->testUInt64_, __isset.testUInt64};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<uint64_t&&>
   testUInt64_ref() && {
      return {std::move(this->testUInt64_), __isset.testUInt64};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const float&>
   testFloat_ref() const& {
    return {this->testFloat_, __isset.testFloat};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<float&>
   testFloat_ref() & {
    return {this->testFloat_, __isset.testFloat};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<float&&>
   testFloat_ref() && {
      return {std::move(this->testFloat_), __isset.testFloat};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const double&>
   testDouble_ref() const& {
    return {this->testDouble_, __isset.testDouble};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<double&>
   testDouble_ref() & {
    return {this->testDouble_, __isset.testDouble};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<double&&>
   testDouble_ref() && {
      return {std::move(this->testDouble_), __isset.testDouble};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const std::string&>
   testShortString_ref() const& {
    return {this->testShortString_, __isset.testShortString};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::string&>
   testShortString_ref() & {
    return {this->testShortString_, __isset.testShortString};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::string&&>
   testShortString_ref() && {
      return {std::move(this->testShortString_), __isset.testShortString};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const std::string&>
   testLongString_ref() const& {
    return {this->testLongString_, __isset.testLongString};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::string&>
   testLongString_ref() & {
    return {this->testLongString_, __isset.testLongString};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::string&&>
   testLongString_ref() && {
      return {std::move(this->testLongString_), __isset.testLongString};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const folly::IOBuf&>
   testIobuf_ref() const& {
    return {this->testIobuf_, __isset.testIobuf};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::IOBuf&>
   testIobuf_ref() & {
    return {this->testIobuf_, __isset.testIobuf};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::IOBuf&&>
   testIobuf_ref() && {
      return {std::move(this->testIobuf_), __isset.testIobuf};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const SimpleStruct&>
   testStruct_ref() const& {
    return {this->testStruct_, __isset.testStruct};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<SimpleStruct&>
   testStruct_ref() & {
    return {this->testStruct_, __isset.testStruct};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<SimpleStruct&&>
   testStruct_ref() && {
      return {std::move(this->testStruct_), __isset.testStruct};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const std::vector<std::string>&>
   testList_ref() const& {
    return {this->testList_, __isset.testList};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::vector<std::string>&>
   testList_ref() & {
    return {this->testList_, __isset.testList};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::vector<std::string>&&>
   testList_ref() && {
      return {std::move(this->testList_), __isset.testList};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const std::vector<test2::util::SimpleEnum>&>
   testEnumVec_ref() const& {
    return {this->testEnumVec_, __isset.testEnumVec};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::vector<test2::util::SimpleEnum>&>
   testEnumVec_ref() & {
    return {this->testEnumVec_, __isset.testEnumVec};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::vector<test2::util::SimpleEnum>&&>
   testEnumVec_ref() && {
      return {std::move(this->testEnumVec_), __isset.testEnumVec};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const test2::util::SimpleUnion&>
   testUnion_ref() const& {
    return {this->testUnion_, __isset.testUnion};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<test2::util::SimpleUnion&>
   testUnion_ref() & {
    return {this->testUnion_, __isset.testUnion};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<test2::util::SimpleUnion&&>
   testUnion_ref() && {
      return {std::move(this->testUnion_), __isset.testUnion};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const std::vector<std::vector<uint64_t>>&>
   testNestedVec_ref() const& {
    return {this->testNestedVec_, __isset.testNestedVec};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::vector<std::vector<uint64_t>>&>
   testNestedVec_ref() & {
    return {this->testNestedVec_, __isset.testNestedVec};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::vector<std::vector<uint64_t>>&&>
   testNestedVec_ref() && {
      return {std::move(this->testNestedVec_), __isset.testNestedVec};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const std::unordered_map<std::string, std::string>&>
   testUMap_ref() const& {
    return {this->testUMap_, __isset.testUMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::unordered_map<std::string, std::string>&>
   testUMap_ref() & {
    return {this->testUMap_, __isset.testUMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::unordered_map<std::string, std::string>&&>
   testUMap_ref() && {
      return {std::move(this->testUMap_), __isset.testUMap};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const std::map<double, double>&>
   testMap_ref() const& {
    return {this->testMap_, __isset.testMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::map<double, double>&>
   testMap_ref() & {
    return {this->testMap_, __isset.testMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::map<double, double>&&>
   testMap_ref() && {
      return {std::move(this->testMap_), __isset.testMap};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const std::map<std::string, std::vector<uint16_t>>&>
   testComplexMap_ref() const& {
    return {this->testComplexMap_, __isset.testComplexMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::map<std::string, std::vector<uint16_t>>&>
   testComplexMap_ref() & {
    return {this->testComplexMap_, __isset.testComplexMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::map<std::string, std::vector<uint16_t>>&&>
   testComplexMap_ref() && {
      return {std::move(this->testComplexMap_), __isset.testComplexMap};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const std::unordered_set<std::string>&>
   testUSet_ref() const& {
    return {this->testUSet_, __isset.testUSet};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::unordered_set<std::string>&>
   testUSet_ref() & {
    return {this->testUSet_, __isset.testUSet};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::unordered_set<std::string>&&>
   testUSet_ref() && {
      return {std::move(this->testUSet_), __isset.testUSet};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const std::set<uint64_t>&>
   testSet_ref() const& {
    return {this->testSet_, __isset.testSet};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::set<uint64_t>&>
   testSet_ref() & {
    return {this->testSet_, __isset.testSet};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::set<uint64_t>&&>
   testSet_ref() && {
      return {std::move(this->testSet_), __isset.testSet};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const std::vector<folly::Optional<std::string>>&>
   testOptionalVec_ref() const& {
    return {this->testOptionalVec_, __isset.testOptionalVec};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::vector<folly::Optional<std::string>>&>
   testOptionalVec_ref() & {
    return {this->testOptionalVec_, __isset.testOptionalVec};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::vector<folly::Optional<std::string>>&&>
   testOptionalVec_ref() && {
      return {std::move(this->testOptionalVec_), __isset.testOptionalVec};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const std::vector<folly::IOBuf>&>
   testIOBufList_ref() const& {
    return {this->testIOBufList_, __isset.testIOBufList};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::vector<folly::IOBuf>&>
   testIOBufList_ref() & {
    return {this->testIOBufList_, __isset.testIOBufList};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::vector<folly::IOBuf>&&>
   testIOBufList_ref() && {
      return {std::move(this->testIOBufList_), __isset.testIOBufList};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const folly::F14FastMap<std::string, std::string>&>
   testF14FastMap_ref() const& {
    return {this->testF14FastMap_, __isset.testF14FastMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14FastMap<std::string, std::string>&>
   testF14FastMap_ref() & {
    return {this->testF14FastMap_, __isset.testF14FastMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14FastMap<std::string, std::string>&&>
   testF14FastMap_ref() && {
      return {std::move(this->testF14FastMap_), __isset.testF14FastMap};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const folly::F14NodeMap<std::string, std::string>&>
   testF14NodeMap_ref() const& {
    return {this->testF14NodeMap_, __isset.testF14NodeMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14NodeMap<std::string, std::string>&>
   testF14NodeMap_ref() & {
    return {this->testF14NodeMap_, __isset.testF14NodeMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14NodeMap<std::string, std::string>&&>
   testF14NodeMap_ref() && {
      return {std::move(this->testF14NodeMap_), __isset.testF14NodeMap};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const folly::F14ValueMap<std::string, std::string>&>
   testF14ValueMap_ref() const& {
    return {this->testF14ValueMap_, __isset.testF14ValueMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14ValueMap<std::string, std::string>&>
   testF14ValueMap_ref() & {
    return {this->testF14ValueMap_, __isset.testF14ValueMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14ValueMap<std::string, std::string>&&>
   testF14ValueMap_ref() && {
      return {std::move(this->testF14ValueMap_), __isset.testF14ValueMap};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const folly::F14VectorMap<std::string, std::string>&>
   testF14VectorMap_ref() const& {
    return {this->testF14VectorMap_, __isset.testF14VectorMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14VectorMap<std::string, std::string>&>
   testF14VectorMap_ref() & {
    return {this->testF14VectorMap_, __isset.testF14VectorMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14VectorMap<std::string, std::string>&&>
   testF14VectorMap_ref() && {
      return {std::move(this->testF14VectorMap_), __isset.testF14VectorMap};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const folly::F14FastSet<std::string>&>
   testF14FastSet_ref() const& {
    return {this->testF14FastSet_, __isset.testF14FastSet};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14FastSet<std::string>&>
   testF14FastSet_ref() & {
    return {this->testF14FastSet_, __isset.testF14FastSet};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14FastSet<std::string>&&>
   testF14FastSet_ref() && {
      return {std::move(this->testF14FastSet_), __isset.testF14FastSet};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const folly::F14NodeSet<std::string>&>
   testF14NodeSet_ref() const& {
    return {this->testF14NodeSet_, __isset.testF14NodeSet};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14NodeSet<std::string>&>
   testF14NodeSet_ref() & {
    return {this->testF14NodeSet_, __isset.testF14NodeSet};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14NodeSet<std::string>&&>
   testF14NodeSet_ref() && {
      return {std::move(this->testF14NodeSet_), __isset.testF14NodeSet};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const folly::F14ValueSet<std::string>&>
   testF14ValueSet_ref() const& {
    return {this->testF14ValueSet_, __isset.testF14ValueSet};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14ValueSet<std::string>&>
   testF14ValueSet_ref() & {
    return {this->testF14ValueSet_, __isset.testF14ValueSet};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14ValueSet<std::string>&&>
   testF14ValueSet_ref() && {
      return {std::move(this->testF14ValueSet_), __isset.testF14ValueSet};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const folly::F14VectorSet<std::string>&>
   testF14VectorSet_ref() const& {
    return {this->testF14VectorSet_, __isset.testF14VectorSet};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14VectorSet<std::string>&>
   testF14VectorSet_ref() & {
    return {this->testF14VectorSet_, __isset.testF14VectorSet};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14VectorSet<std::string>&&>
   testF14VectorSet_ref() && {
      return {std::move(this->testF14VectorSet_), __isset.testF14VectorSet};
  }
  
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const std::string&>
   testOptionalKeywordString_ref() const& {
    return {this->testOptionalKeywordString_, __isset.testOptionalKeywordString};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<std::string&>
   testOptionalKeywordString_ref() & {
    return {this->testOptionalKeywordString_, __isset.testOptionalKeywordString};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<std::string&&>
   testOptionalKeywordString_ref() && {
      return {std::move(this->testOptionalKeywordString_), __isset.testOptionalKeywordString};
  }
  
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const folly::IOBuf&>
   testOptionalKeywordIobuf_ref() const& {
    return {this->testOptionalKeywordIobuf_, __isset.testOptionalKeywordIobuf};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<folly::IOBuf&>
   testOptionalKeywordIobuf_ref() & {
    return {this->testOptionalKeywordIobuf_, __isset.testOptionalKeywordIobuf};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<folly::IOBuf&&>
   testOptionalKeywordIobuf_ref() && {
      return {std::move(this->testOptionalKeywordIobuf_), __isset.testOptionalKeywordIobuf};
  }
  
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const bool&>
   testOptionalKeywordBool_ref() const& {
    return {this->testOptionalKeywordBool_, __isset.testOptionalKeywordBool};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<bool&>
   testOptionalKeywordBool_ref() & {
    return {this->testOptionalKeywordBool_, __isset.testOptionalKeywordBool};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<bool&&>
   testOptionalKeywordBool_ref() && {
      return {std::move(this->testOptionalKeywordBool_), __isset.testOptionalKeywordBool};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const CastableToFollyDynamicType&>
   testCastable_ref() const& {
    return {this->testCastable_, __isset.testCastable};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<CastableToFollyDynamicType&>
   testCastable_ref() & {
    return {this->testCastable_, __isset.testCastable};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<CastableToFollyDynamicType&&>
   testCastable_ref() && {
      return {std::move(this->testCastable_), __isset.testCastable};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const UserType&>
   testType_ref() const& {
    return {this->testType_, __isset.testType};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<UserType&>
   testType_ref() & {
    return {this->testType_, __isset.testType};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<UserType&&>
   testType_ref() && {
      return {std::move(this->testType_), __isset.testType};
  }
  
  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

 private:
  struct __isset {
    bool _carbon_simplestruct_;
    bool key;
    bool testEnum;
    bool testBool;
    bool testChar;
    bool testInt8;
    bool testInt16;
    bool testInt32;
    bool testInt64;
    bool testUInt8;
    bool testUInt16;
    bool testUInt32;
    bool testUInt64;
    bool testFloat;
    bool testDouble;
    bool testShortString;
    bool testLongString;
    bool testIobuf;
    bool testStruct;
    bool testList;
    bool testOptionalString;
    bool testOptionalIobuf;
    bool testEnumVec;
    bool testUnion;
    bool testNestedVec;
    bool testUMap;
    bool testMap;
    bool testComplexMap;
    bool testUSet;
    bool testSet;
    bool testOptionalBool;
    bool testOptionalVec;
    bool testIOBufList;
    bool testF14FastMap;
    bool testF14NodeMap;
    bool testF14ValueMap;
    bool testF14VectorMap;
    bool testF14FastSet;
    bool testF14NodeSet;
    bool testF14ValueSet;
    bool testF14VectorSet;
    bool testOptionalKeywordString;
    bool testOptionalKeywordIobuf;
    bool testOptionalKeywordBool;
    bool testCastable;
    bool testType;
  } __isset = {};

  SimpleStruct _carbon_simplestruct_;
  carbon::Keys<folly::IOBuf> key_;
  test2::util::SimpleEnum testEnum_{test2::util::SimpleEnum::Twenty};
  int64_t testInt64_{0};
  uint64_t testUInt64_{0};
  double testDouble_{0.0};
  std::string testShortString_;
  std::string testLongString_;
  folly::IOBuf testIobuf_;
  SimpleStruct testStruct_;
  std::vector<std::string> testList_;
  folly::Optional<std::string> testOptionalString_;
  folly::Optional<folly::IOBuf> testOptionalIobuf_;
  std::vector<test2::util::SimpleEnum> testEnumVec_;
  test2::util::SimpleUnion testUnion_;
  std::vector<std::vector<uint64_t>> testNestedVec_;
  std::unordered_map<std::string, std::string> testUMap_;
  std::map<double, double> testMap_;
  std::map<std::string, std::vector<uint16_t>> testComplexMap_;
  std::unordered_set<std::string> testUSet_;
  std::set<uint64_t> testSet_;
  folly::Optional<bool> testOptionalBool_;
  std::vector<folly::Optional<std::string>> testOptionalVec_;
  std::vector<folly::IOBuf> testIOBufList_;
  folly::F14FastMap<std::string, std::string> testF14FastMap_;
  folly::F14NodeMap<std::string, std::string> testF14NodeMap_;
  folly::F14ValueMap<std::string, std::string> testF14ValueMap_;
  folly::F14VectorMap<std::string, std::string> testF14VectorMap_;
  folly::F14FastSet<std::string> testF14FastSet_;
  folly::F14NodeSet<std::string> testF14NodeSet_;
  folly::F14ValueSet<std::string> testF14ValueSet_;
  folly::F14VectorSet<std::string> testF14VectorSet_;
  std::string testOptionalKeywordString_;
  folly::IOBuf testOptionalKeywordIobuf_;
  CastableToFollyDynamicType testCastable_;
  UserType testType_;
  int32_t testInt32_{0};
  uint32_t testUInt32_{0};
  float testFloat_{0.0};
  int16_t testInt16_{0};
  uint16_t testUInt16_{0};
  bool testBool_{false};
  char testChar_{'\0'};
  int8_t testInt8_{0};
  uint8_t testUInt8_{0};
  bool testOptionalKeywordBool_{false};
};

class TestReply : public carbon::ReplyCommon {
 public:

  static constexpr size_t typeId = 70;

  TestReply() = default;
  TestReply(const TestReply&) = default;
  TestReply& operator=(const TestReply&) = default;
  TestReply(TestReply&&) = default;
  TestReply& operator=(TestReply&&) = default;
  explicit TestReply(carbon::Result carbonResult)
      : result_(carbonResult) {}

  carbon::Result result() const {
    return result_;
  }
  carbon::Result& result() {
    return result_;
  }
  int32_t valInt32() const {
    return valInt32_;
  }
  int32_t& valInt32() {
    return valInt32_;
  }
  int64_t valInt64() const {
    return valInt64_;
  }
  int64_t& valInt64() {
    return valInt64_;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const carbon::Result&>
   result_ref() const& {
    return {this->result_, __isset.result};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<carbon::Result&>
   result_ref() & {
    return {this->result_, __isset.result};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<carbon::Result&&>
   result_ref() && {
      return {std::move(this->result_), __isset.result};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const int32_t&>
   valInt32_ref() const& {
    return {this->valInt32_, __isset.valInt32};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<int32_t&>
   valInt32_ref() & {
    return {this->valInt32_, __isset.valInt32};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<int32_t&&>
   valInt32_ref() && {
      return {std::move(this->valInt32_), __isset.valInt32};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const int64_t&>
   valInt64_ref() const& {
    return {this->valInt64_, __isset.valInt64};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<int64_t&>
   valInt64_ref() & {
    return {this->valInt64_, __isset.valInt64};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<int64_t&&>
   valInt64_ref() && {
      return {std::move(this->valInt64_), __isset.valInt64};
  }
  

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

 private:
  struct __isset {
    bool result;
    bool valInt32;
    bool valInt64;
  } __isset = {};

  int64_t valInt64_{0};
  int32_t valInt32_{0};
  carbon::Result result_{carbon::Result::UNKNOWN};
};

class TestReplyStringKey;

class TestRequestStringKey : public carbon::RequestCommon {
 public:
  using reply_type = TestReplyStringKey;

  static constexpr size_t typeId = 71;
  static constexpr const char* name = "testStringKey";

  TestRequestStringKey() = default;
  TestRequestStringKey(const TestRequestStringKey&) = default;
  TestRequestStringKey& operator=(const TestRequestStringKey&) = default;
  TestRequestStringKey(TestRequestStringKey&&) = default;
  TestRequestStringKey& operator=(TestRequestStringKey&&) = default;
  explicit TestRequestStringKey(folly::StringPiece sp)
      : key_(sp) {}
  explicit TestRequestStringKey(std::string&& carbonKey)
      : key_(std::move(carbonKey)) {}
  explicit TestRequestStringKey(const char* key)
      : key_(key) {}

  const carbon::Keys<std::string>& key() const {
    return key_;
  }
  carbon::Keys<std::string>& key() {
    markBufferAsDirty();
    return key_;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const carbon::Keys<std::string>&>
   key_ref() const& {
    return {this->key_, __isset.key};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<carbon::Keys<std::string>&>
   key_ref() & {
    return {this->key_, __isset.key};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<carbon::Keys<std::string>&&>
   key_ref() && {
      return {std::move(this->key_), __isset.key};
  }
  
  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

 private:
  struct __isset {
    bool key;
  } __isset = {};

  carbon::Keys<std::string> key_;
};

class TestReplyStringKey : public carbon::ReplyCommon {
 public:

  static constexpr size_t typeId = 72;

  TestReplyStringKey() = default;
  TestReplyStringKey(const TestReplyStringKey&) = default;
  TestReplyStringKey& operator=(const TestReplyStringKey&) = default;
  TestReplyStringKey(TestReplyStringKey&&) = default;
  TestReplyStringKey& operator=(TestReplyStringKey&&) = default;
  explicit TestReplyStringKey(carbon::Result carbonResult)
      : result_(carbonResult) {}

  carbon::Result result() const {
    return result_;
  }
  carbon::Result& result() {
    return result_;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const carbon::Result&>
   result_ref() const& {
    return {this->result_, __isset.result};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<carbon::Result&>
   result_ref() & {
    return {this->result_, __isset.result};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<carbon::Result&&>
   result_ref() && {
      return {std::move(this->result_), __isset.result};
  }
  

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

 private:
  struct __isset {
    bool result;
  } __isset = {};

  carbon::Result result_{carbon::Result::UNKNOWN};
};

class TestOptionalBool {
 public:

  TestOptionalBool() = default;
  TestOptionalBool(const TestOptionalBool&) = default;
  TestOptionalBool& operator=(const TestOptionalBool&) = default;
  TestOptionalBool(TestOptionalBool&&) = default;
  TestOptionalBool& operator=(TestOptionalBool&&) = default;

  const folly::Optional<bool>& optionalBool() const {
    return optionalBool_;
  }
  folly::Optional<bool>& optionalBool() {
    return optionalBool_;
  }

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

 private:
  struct __isset {
    bool optionalBool;
  } __isset = {};

  folly::Optional<bool> optionalBool_;
};

class TestOptionalUnion {
 private:
  using _IdTypeMap = carbon::List<
      facebook::memcache::KV<1, folly::Optional<int64_t>>,
      facebook::memcache::KV<2, folly::Optional<bool>>,
      facebook::memcache::KV<3, folly::Optional<std::string>>>;

 public:
  enum class ValueType : uint32_t {
    EMPTY = 0,
    UMEMBER1 = 1,
    UMEMBER2 = 2,
    UMEMBER3 = 3
  };

  TestOptionalUnion() = default;
  TestOptionalUnion(const TestOptionalUnion&) = default;
  TestOptionalUnion& operator=(const TestOptionalUnion&) = default;
  TestOptionalUnion(TestOptionalUnion&&) = default;
  TestOptionalUnion& operator=(TestOptionalUnion&&) = default;

  ValueType which() const {
    return static_cast<ValueType>(_which_);
  }

  folly::Optional<int64_t>& umember1() {
    if (_which_ == 0) {
      return emplace<1>();
    }
    if (_which_ != 1) {
      throw std::runtime_error("umember1 is not set in union TestOptionalUnion.");
    }
    return _carbon_variant.get<folly::Optional<int64_t>>();
  }
  const folly::Optional<int64_t>& umember1() const {
    if (_which_ != 1) {
      throw std::runtime_error("umember1 is not set in union TestOptionalUnion.");
    }
    return _carbon_variant.get<folly::Optional<int64_t>>();
  }
  folly::Optional<bool>& umember2() {
    if (_which_ == 0) {
      return emplace<2>();
    }
    if (_which_ != 2) {
      throw std::runtime_error("umember2 is not set in union TestOptionalUnion.");
    }
    return _carbon_variant.get<folly::Optional<bool>>();
  }
  const folly::Optional<bool>& umember2() const {
    if (_which_ != 2) {
      throw std::runtime_error("umember2 is not set in union TestOptionalUnion.");
    }
    return _carbon_variant.get<folly::Optional<bool>>();
  }
  folly::Optional<std::string>& umember3() {
    if (_which_ == 0) {
      return emplace<3>();
    }
    if (_which_ != 3) {
      throw std::runtime_error("umember3 is not set in union TestOptionalUnion.");
    }
    return _carbon_variant.get<folly::Optional<std::string>>();
  }
  const folly::Optional<std::string>& umember3() const {
    if (_which_ != 3) {
      throw std::runtime_error("umember3 is not set in union TestOptionalUnion.");
    }
    return _carbon_variant.get<folly::Optional<std::string>>();
  }

  template <
      uint32_t id,
      class C = typename carbon::FindByKey<id, _IdTypeMap>::type>
  C& get() {
    if (id != _which_) {
      throw std::runtime_error("Type id is not set in union TestOptionalUnion.");
    }
    return _carbon_variant.get<C>();
  }

  template <
      uint32_t id,
      class C = typename carbon::FindByKey<id, _IdTypeMap>::type>
  const C& get() const {
    if (id != _which_) {
      throw std::runtime_error("Type id is not set in union TestOptionalUnion.");
    }
    return _carbon_variant.get<C>();
  }

  /* Note: Emplace invalidates all previous accessor references.
   * Please exercise caution.
   */
  template <
      uint32_t id,
      class... Args,
      class C = typename carbon::FindByKey<id, _IdTypeMap>::type>
  C& emplace(Args&&... args) {
    _which_ = id;
    return _carbon_variant.emplace<C>(std::forward<Args>(args)...);
  }

  template <
      ValueType id,
      class... Args,
      class C = typename carbon::
          FindByKey<static_cast<uint32_t>(id), _IdTypeMap>::type>
  C& emplace(Args&&... args) {
    _which_ = static_cast<uint32_t>(id);
    return _carbon_variant.emplace<C>(std::forward<Args>(args)...);
  }
  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;
  template <class V>
  void foreachMember(V&& v);
  template <class V>
  void foreachMember(V&& v) const;

 private:
  carbon::Variant<
      folly::Optional<int64_t>,
      folly::Optional<bool>,
      folly::Optional<std::string>> _carbon_variant;
  uint32_t _which_{0};
};

class TestUnion {
 private:
  using _IdTypeMap = carbon::List<
      facebook::memcache::KV<1, uint64_t>,
      facebook::memcache::KV<2, uint32_t>,
      facebook::memcache::KV<3, uint16_t>>;

 public:
  enum class ValueType : uint32_t {
    EMPTY = 0,
    A = 1,
    B = 2,
    C = 3
  };

  TestUnion() = default;
  TestUnion(const TestUnion&) = default;
  TestUnion& operator=(const TestUnion&) = default;
  TestUnion(TestUnion&&) = default;
  TestUnion& operator=(TestUnion&&) = default;

  ValueType which() const {
    return static_cast<ValueType>(_which_);
  }

  uint64_t& a() {
    if (_which_ == 0) {
      return emplace<1>();
    }
    if (_which_ != 1) {
      throw std::runtime_error("a is not set in union TestUnion.");
    }
    return _carbon_variant.get<uint64_t>();
  }
  uint64_t a() const {
    if (_which_ != 1) {
      throw std::runtime_error("a is not set in union TestUnion.");
    }
    return _carbon_variant.get<uint64_t>();
  }
  uint32_t& b() {
    if (_which_ == 0) {
      return emplace<2>();
    }
    if (_which_ != 2) {
      throw std::runtime_error("b is not set in union TestUnion.");
    }
    return _carbon_variant.get<uint32_t>();
  }
  uint32_t b() const {
    if (_which_ != 2) {
      throw std::runtime_error("b is not set in union TestUnion.");
    }
    return _carbon_variant.get<uint32_t>();
  }
  uint16_t& c() {
    if (_which_ == 0) {
      return emplace<3>();
    }
    if (_which_ != 3) {
      throw std::runtime_error("c is not set in union TestUnion.");
    }
    return _carbon_variant.get<uint16_t>();
  }
  uint16_t c() const {
    if (_which_ != 3) {
      throw std::runtime_error("c is not set in union TestUnion.");
    }
    return _carbon_variant.get<uint16_t>();
  }

  template <
      uint32_t id,
      class C = typename carbon::FindByKey<id, _IdTypeMap>::type>
  C& get() {
    if (id != _which_) {
      throw std::runtime_error("Type id is not set in union TestUnion.");
    }
    return _carbon_variant.get<C>();
  }

  template <
      uint32_t id,
      class C = typename carbon::FindByKey<id, _IdTypeMap>::type>
  const C& get() const {
    if (id != _which_) {
      throw std::runtime_error("Type id is not set in union TestUnion.");
    }
    return _carbon_variant.get<C>();
  }

  /* Note: Emplace invalidates all previous accessor references.
   * Please exercise caution.
   */
  template <
      uint32_t id,
      class... Args,
      class C = typename carbon::FindByKey<id, _IdTypeMap>::type>
  C& emplace(Args&&... args) {
    _which_ = id;
    return _carbon_variant.emplace<C>(std::forward<Args>(args)...);
  }

  template <
      ValueType id,
      class... Args,
      class C = typename carbon::
          FindByKey<static_cast<uint32_t>(id), _IdTypeMap>::type>
  C& emplace(Args&&... args) {
    _which_ = static_cast<uint32_t>(id);
    return _carbon_variant.emplace<C>(std::forward<Args>(args)...);
  }
  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;
  template <class V>
  void foreachMember(V&& v);
  template <class V>
  void foreachMember(V&& v) const;

 private:
  carbon::Variant<
      uint64_t,
      uint32_t,
      uint16_t> _carbon_variant;
  uint32_t _which_{0};
};

class TestF14Containers {
 public:

  TestF14Containers() = default;
  TestF14Containers(const TestF14Containers&) = default;
  TestF14Containers& operator=(const TestF14Containers&) = default;
  TestF14Containers(TestF14Containers&&) = default;
  TestF14Containers& operator=(TestF14Containers&&) = default;

  const folly::F14FastMap<std::string, int64_t>& fastMap() const {
    return fastMap_;
  }
  folly::F14FastMap<std::string, int64_t>& fastMap() {
    return fastMap_;
  }
  const folly::F14NodeMap<std::string, int64_t>& nodeMap() const {
    return nodeMap_;
  }
  folly::F14NodeMap<std::string, int64_t>& nodeMap() {
    return nodeMap_;
  }
  const folly::F14ValueMap<std::string, int64_t>& valueMap() const {
    return valueMap_;
  }
  folly::F14ValueMap<std::string, int64_t>& valueMap() {
    return valueMap_;
  }
  const folly::F14VectorMap<std::string, int64_t>& vectorMap() const {
    return vectorMap_;
  }
  folly::F14VectorMap<std::string, int64_t>& vectorMap() {
    return vectorMap_;
  }
  const folly::F14FastSet<int64_t>& fastSet() const {
    return fastSet_;
  }
  folly::F14FastSet<int64_t>& fastSet() {
    return fastSet_;
  }
  const folly::F14FastSet<int64_t>& nodeSet() const {
    return nodeSet_;
  }
  folly::F14FastSet<int64_t>& nodeSet() {
    return nodeSet_;
  }
  const folly::F14FastSet<int64_t>& valueSet() const {
    return valueSet_;
  }
  folly::F14FastSet<int64_t>& valueSet() {
    return valueSet_;
  }
  const folly::F14FastSet<int64_t>& vectorSet() const {
    return vectorSet_;
  }
  folly::F14FastSet<int64_t>& vectorSet() {
    return vectorSet_;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const folly::F14FastMap<std::string, int64_t>&>
   fastMap_ref() const& {
    return {this->fastMap_, __isset.fastMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14FastMap<std::string, int64_t>&>
   fastMap_ref() & {
    return {this->fastMap_, __isset.fastMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14FastMap<std::string, int64_t>&&>
   fastMap_ref() && {
      return {std::move(this->fastMap_), __isset.fastMap};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const folly::F14NodeMap<std::string, int64_t>&>
   nodeMap_ref() const& {
    return {this->nodeMap_, __isset.nodeMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14NodeMap<std::string, int64_t>&>
   nodeMap_ref() & {
    return {this->nodeMap_, __isset.nodeMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14NodeMap<std::string, int64_t>&&>
   nodeMap_ref() && {
      return {std::move(this->nodeMap_), __isset.nodeMap};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const folly::F14ValueMap<std::string, int64_t>&>
   valueMap_ref() const& {
    return {this->valueMap_, __isset.valueMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14ValueMap<std::string, int64_t>&>
   valueMap_ref() & {
    return {this->valueMap_, __isset.valueMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14ValueMap<std::string, int64_t>&&>
   valueMap_ref() && {
      return {std::move(this->valueMap_), __isset.valueMap};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const folly::F14VectorMap<std::string, int64_t>&>
   vectorMap_ref() const& {
    return {this->vectorMap_, __isset.vectorMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14VectorMap<std::string, int64_t>&>
   vectorMap_ref() & {
    return {this->vectorMap_, __isset.vectorMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14VectorMap<std::string, int64_t>&&>
   vectorMap_ref() && {
      return {std::move(this->vectorMap_), __isset.vectorMap};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const folly::F14FastSet<int64_t>&>
   fastSet_ref() const& {
    return {this->fastSet_, __isset.fastSet};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14FastSet<int64_t>&>
   fastSet_ref() & {
    return {this->fastSet_, __isset.fastSet};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14FastSet<int64_t>&&>
   fastSet_ref() && {
      return {std::move(this->fastSet_), __isset.fastSet};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const folly::F14FastSet<int64_t>&>
   nodeSet_ref() const& {
    return {this->nodeSet_, __isset.nodeSet};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14FastSet<int64_t>&>
   nodeSet_ref() & {
    return {this->nodeSet_, __isset.nodeSet};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14FastSet<int64_t>&&>
   nodeSet_ref() && {
      return {std::move(this->nodeSet_), __isset.nodeSet};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const folly::F14FastSet<int64_t>&>
   valueSet_ref() const& {
    return {this->valueSet_, __isset.valueSet};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14FastSet<int64_t>&>
   valueSet_ref() & {
    return {this->valueSet_, __isset.valueSet};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14FastSet<int64_t>&&>
   valueSet_ref() && {
      return {std::move(this->valueSet_), __isset.valueSet};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const folly::F14FastSet<int64_t>&>
   vectorSet_ref() const& {
    return {this->vectorSet_, __isset.vectorSet};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14FastSet<int64_t>&>
   vectorSet_ref() & {
    return {this->vectorSet_, __isset.vectorSet};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::F14FastSet<int64_t>&&>
   vectorSet_ref() && {
      return {std::move(this->vectorSet_), __isset.vectorSet};
  }
  

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

 private:
  struct __isset {
    bool fastMap;
    bool nodeMap;
    bool valueMap;
    bool vectorMap;
    bool fastSet;
    bool nodeSet;
    bool valueSet;
    bool vectorSet;
  } __isset = {};

  folly::F14FastMap<std::string, int64_t> fastMap_;
  folly::F14NodeMap<std::string, int64_t> nodeMap_;
  folly::F14ValueMap<std::string, int64_t> valueMap_;
  folly::F14VectorMap<std::string, int64_t> vectorMap_;
  folly::F14FastSet<int64_t> fastSet_;
  folly::F14FastSet<int64_t> nodeSet_;
  folly::F14FastSet<int64_t> valueSet_;
  folly::F14FastSet<int64_t> vectorSet_;
};

class TestStdContainers {
 public:

  TestStdContainers() = default;
  TestStdContainers(const TestStdContainers&) = default;
  TestStdContainers& operator=(const TestStdContainers&) = default;
  TestStdContainers(TestStdContainers&&) = default;
  TestStdContainers& operator=(TestStdContainers&&) = default;

  const std::unordered_map<std::string, int64_t>& fastMap() const {
    return fastMap_;
  }
  std::unordered_map<std::string, int64_t>& fastMap() {
    return fastMap_;
  }
  const std::unordered_map<std::string, int64_t>& nodeMap() const {
    return nodeMap_;
  }
  std::unordered_map<std::string, int64_t>& nodeMap() {
    return nodeMap_;
  }
  const std::unordered_map<std::string, int64_t>& valueMap() const {
    return valueMap_;
  }
  std::unordered_map<std::string, int64_t>& valueMap() {
    return valueMap_;
  }
  const std::unordered_map<std::string, int64_t>& vectorMap() const {
    return vectorMap_;
  }
  std::unordered_map<std::string, int64_t>& vectorMap() {
    return vectorMap_;
  }
  const std::unordered_set<int64_t>& fastSet() const {
    return fastSet_;
  }
  std::unordered_set<int64_t>& fastSet() {
    return fastSet_;
  }
  const std::unordered_set<int64_t>& nodeSet() const {
    return nodeSet_;
  }
  std::unordered_set<int64_t>& nodeSet() {
    return nodeSet_;
  }
  const std::unordered_set<int64_t>& valueSet() const {
    return valueSet_;
  }
  std::unordered_set<int64_t>& valueSet() {
    return valueSet_;
  }
  const std::unordered_set<int64_t>& vectorSet() const {
    return vectorSet_;
  }
  std::unordered_set<int64_t>& vectorSet() {
    return vectorSet_;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const std::unordered_map<std::string, int64_t>&>
   fastMap_ref() const& {
    return {this->fastMap_, __isset.fastMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::unordered_map<std::string, int64_t>&>
   fastMap_ref() & {
    return {this->fastMap_, __isset.fastMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::unordered_map<std::string, int64_t>&&>
   fastMap_ref() && {
      return {std::move(this->fastMap_), __isset.fastMap};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const std::unordered_map<std::string, int64_t>&>
   nodeMap_ref() const& {
    return {this->nodeMap_, __isset.nodeMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::unordered_map<std::string, int64_t>&>
   nodeMap_ref() & {
    return {this->nodeMap_, __isset.nodeMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::unordered_map<std::string, int64_t>&&>
   nodeMap_ref() && {
      return {std::move(this->nodeMap_), __isset.nodeMap};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const std::unordered_map<std::string, int64_t>&>
   valueMap_ref() const& {
    return {this->valueMap_, __isset.valueMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::unordered_map<std::string, int64_t>&>
   valueMap_ref() & {
    return {this->valueMap_, __isset.valueMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::unordered_map<std::string, int64_t>&&>
   valueMap_ref() && {
      return {std::move(this->valueMap_), __isset.valueMap};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const std::unordered_map<std::string, int64_t>&>
   vectorMap_ref() const& {
    return {this->vectorMap_, __isset.vectorMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::unordered_map<std::string, int64_t>&>
   vectorMap_ref() & {
    return {this->vectorMap_, __isset.vectorMap};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::unordered_map<std::string, int64_t>&&>
   vectorMap_ref() && {
      return {std::move(this->vectorMap_), __isset.vectorMap};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const std::unordered_set<int64_t>&>
   fastSet_ref() const& {
    return {this->fastSet_, __isset.fastSet};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::unordered_set<int64_t>&>
   fastSet_ref() & {
    return {this->fastSet_, __isset.fastSet};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::unordered_set<int64_t>&&>
   fastSet_ref() && {
      return {std::move(this->fastSet_), __isset.fastSet};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const std::unordered_set<int64_t>&>
   nodeSet_ref() const& {
    return {this->nodeSet_, __isset.nodeSet};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::unordered_set<int64_t>&>
   nodeSet_ref() & {
    return {this->nodeSet_, __isset.nodeSet};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::unordered_set<int64_t>&&>
   nodeSet_ref() && {
      return {std::move(this->nodeSet_), __isset.nodeSet};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const std::unordered_set<int64_t>&>
   valueSet_ref() const& {
    return {this->valueSet_, __isset.valueSet};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::unordered_set<int64_t>&>
   valueSet_ref() & {
    return {this->valueSet_, __isset.valueSet};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::unordered_set<int64_t>&&>
   valueSet_ref() && {
      return {std::move(this->valueSet_), __isset.valueSet};
  }
  
  FOLLY_ERASE ::apache::thrift::field_ref<const std::unordered_set<int64_t>&>
   vectorSet_ref() const& {
    return {this->vectorSet_, __isset.vectorSet};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::unordered_set<int64_t>&>
   vectorSet_ref() & {
    return {this->vectorSet_, __isset.vectorSet};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::unordered_set<int64_t>&&>
   vectorSet_ref() && {
      return {std::move(this->vectorSet_), __isset.vectorSet};
  }
  

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

 private:
  struct __isset {
    bool fastMap;
    bool nodeMap;
    bool valueMap;
    bool vectorMap;
    bool fastSet;
    bool nodeSet;
    bool valueSet;
    bool vectorSet;
  } __isset = {};

  std::unordered_map<std::string, int64_t> fastMap_;
  std::unordered_map<std::string, int64_t> nodeMap_;
  std::unordered_map<std::string, int64_t> valueMap_;
  std::unordered_map<std::string, int64_t> vectorMap_;
  std::unordered_set<int64_t> fastSet_;
  std::unordered_set<int64_t> nodeSet_;
  std::unordered_set<int64_t> valueSet_;
  std::unordered_set<int64_t> vectorSet_;
};

enum class EnumUInt64 : uint64_t {
  AAA = 0,
  BBB = 1,
  CCC = 2
};

std::string enumEnumUInt64ToString(EnumUInt64 val);

enum class EnumUInt32 : uint32_t {
  AAA = 0,
  BBB = 1,
  CCC = 2
};

std::string enumEnumUInt32ToString(EnumUInt32 val);

enum class EnumUInt16 : uint16_t {
  AAA = 0,
  BBB = 1,
  CCC = 2
};

std::string enumEnumUInt16ToString(EnumUInt16 val);

enum class EnumUInt8 : uint8_t {
  AAA = 0,
  BBB = 1,
  CCC = 2
};

std::string enumEnumUInt8ToString(EnumUInt8 val);

enum class EnumInt64 : int64_t {
  AAA = 0,
  BBB = 1,
  CCC = 2
};

std::string enumEnumInt64ToString(EnumInt64 val);

enum class EnumInt32 : int32_t {
  AAA = 0,
  BBB = 1,
  CCC = 2
};

std::string enumEnumInt32ToString(EnumInt32 val);

enum class EnumInt16 : int16_t {
  AAA = 0,
  BBB = 1,
  CCC = 2
};

std::string enumEnumInt16ToString(EnumInt16 val);

enum class EnumInt8 : int8_t {
  AAA = 0,
  BBB = 1,
  CCC = 2
};

std::string enumEnumInt8ToString(EnumInt8 val);

class StructWithEnumUInt64 {
 public:

  StructWithEnumUInt64() = default;
  StructWithEnumUInt64(const StructWithEnumUInt64&) = default;
  StructWithEnumUInt64& operator=(const StructWithEnumUInt64&) = default;
  StructWithEnumUInt64(StructWithEnumUInt64&&) = default;
  StructWithEnumUInt64& operator=(StructWithEnumUInt64&&) = default;

  const EnumUInt64& testEnum() const {
    return testEnum_;
  }
  EnumUInt64& testEnum() {
    return testEnum_;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const EnumUInt64&>
   testEnum_ref() const& {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<EnumUInt64&>
   testEnum_ref() & {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<EnumUInt64&&>
   testEnum_ref() && {
      return {std::move(this->testEnum_), __isset.testEnum};
  }
  

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

 private:
  struct __isset {
    bool testEnum;
  } __isset = {};

  EnumUInt64 testEnum_{EnumUInt64::AAA};
};

class StructWithEnumUInt32 {
 public:

  StructWithEnumUInt32() = default;
  StructWithEnumUInt32(const StructWithEnumUInt32&) = default;
  StructWithEnumUInt32& operator=(const StructWithEnumUInt32&) = default;
  StructWithEnumUInt32(StructWithEnumUInt32&&) = default;
  StructWithEnumUInt32& operator=(StructWithEnumUInt32&&) = default;

  const EnumUInt32& testEnum() const {
    return testEnum_;
  }
  EnumUInt32& testEnum() {
    return testEnum_;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const EnumUInt32&>
   testEnum_ref() const& {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<EnumUInt32&>
   testEnum_ref() & {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<EnumUInt32&&>
   testEnum_ref() && {
      return {std::move(this->testEnum_), __isset.testEnum};
  }
  

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

 private:
  struct __isset {
    bool testEnum;
  } __isset = {};

  EnumUInt32 testEnum_{EnumUInt32::AAA};
};

class StructWithEnumUInt16 {
 public:

  StructWithEnumUInt16() = default;
  StructWithEnumUInt16(const StructWithEnumUInt16&) = default;
  StructWithEnumUInt16& operator=(const StructWithEnumUInt16&) = default;
  StructWithEnumUInt16(StructWithEnumUInt16&&) = default;
  StructWithEnumUInt16& operator=(StructWithEnumUInt16&&) = default;

  const EnumUInt16& testEnum() const {
    return testEnum_;
  }
  EnumUInt16& testEnum() {
    return testEnum_;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const EnumUInt16&>
   testEnum_ref() const& {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<EnumUInt16&>
   testEnum_ref() & {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<EnumUInt16&&>
   testEnum_ref() && {
      return {std::move(this->testEnum_), __isset.testEnum};
  }
  

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

 private:
  struct __isset {
    bool testEnum;
  } __isset = {};

  EnumUInt16 testEnum_{EnumUInt16::AAA};
};

class StructWithEnumUInt8 {
 public:

  StructWithEnumUInt8() = default;
  StructWithEnumUInt8(const StructWithEnumUInt8&) = default;
  StructWithEnumUInt8& operator=(const StructWithEnumUInt8&) = default;
  StructWithEnumUInt8(StructWithEnumUInt8&&) = default;
  StructWithEnumUInt8& operator=(StructWithEnumUInt8&&) = default;

  const EnumUInt8& testEnum() const {
    return testEnum_;
  }
  EnumUInt8& testEnum() {
    return testEnum_;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const EnumUInt8&>
   testEnum_ref() const& {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<EnumUInt8&>
   testEnum_ref() & {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<EnumUInt8&&>
   testEnum_ref() && {
      return {std::move(this->testEnum_), __isset.testEnum};
  }
  

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

 private:
  struct __isset {
    bool testEnum;
  } __isset = {};

  EnumUInt8 testEnum_{EnumUInt8::AAA};
};

class StructWithEnumInt64 {
 public:

  StructWithEnumInt64() = default;
  StructWithEnumInt64(const StructWithEnumInt64&) = default;
  StructWithEnumInt64& operator=(const StructWithEnumInt64&) = default;
  StructWithEnumInt64(StructWithEnumInt64&&) = default;
  StructWithEnumInt64& operator=(StructWithEnumInt64&&) = default;

  const EnumInt64& testEnum() const {
    return testEnum_;
  }
  EnumInt64& testEnum() {
    return testEnum_;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const EnumInt64&>
   testEnum_ref() const& {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<EnumInt64&>
   testEnum_ref() & {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<EnumInt64&&>
   testEnum_ref() && {
      return {std::move(this->testEnum_), __isset.testEnum};
  }
  

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

 private:
  struct __isset {
    bool testEnum;
  } __isset = {};

  EnumInt64 testEnum_{EnumInt64::AAA};
};

class StructWithEnumInt32 {
 public:

  StructWithEnumInt32() = default;
  StructWithEnumInt32(const StructWithEnumInt32&) = default;
  StructWithEnumInt32& operator=(const StructWithEnumInt32&) = default;
  StructWithEnumInt32(StructWithEnumInt32&&) = default;
  StructWithEnumInt32& operator=(StructWithEnumInt32&&) = default;

  const EnumInt32& testEnum() const {
    return testEnum_;
  }
  EnumInt32& testEnum() {
    return testEnum_;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const EnumInt32&>
   testEnum_ref() const& {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<EnumInt32&>
   testEnum_ref() & {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<EnumInt32&&>
   testEnum_ref() && {
      return {std::move(this->testEnum_), __isset.testEnum};
  }
  

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

 private:
  struct __isset {
    bool testEnum;
  } __isset = {};

  EnumInt32 testEnum_{EnumInt32::AAA};
};

class StructWithEnumInt16 {
 public:

  StructWithEnumInt16() = default;
  StructWithEnumInt16(const StructWithEnumInt16&) = default;
  StructWithEnumInt16& operator=(const StructWithEnumInt16&) = default;
  StructWithEnumInt16(StructWithEnumInt16&&) = default;
  StructWithEnumInt16& operator=(StructWithEnumInt16&&) = default;

  const EnumInt16& testEnum() const {
    return testEnum_;
  }
  EnumInt16& testEnum() {
    return testEnum_;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const EnumInt16&>
   testEnum_ref() const& {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<EnumInt16&>
   testEnum_ref() & {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<EnumInt16&&>
   testEnum_ref() && {
      return {std::move(this->testEnum_), __isset.testEnum};
  }
  

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

 private:
  struct __isset {
    bool testEnum;
  } __isset = {};

  EnumInt16 testEnum_{EnumInt16::AAA};
};

class StructWithEnumInt8 {
 public:

  StructWithEnumInt8() = default;
  StructWithEnumInt8(const StructWithEnumInt8&) = default;
  StructWithEnumInt8& operator=(const StructWithEnumInt8&) = default;
  StructWithEnumInt8(StructWithEnumInt8&&) = default;
  StructWithEnumInt8& operator=(StructWithEnumInt8&&) = default;

  const EnumInt8& testEnum() const {
    return testEnum_;
  }
  EnumInt8& testEnum() {
    return testEnum_;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const EnumInt8&>
   testEnum_ref() const& {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<EnumInt8&>
   testEnum_ref() & {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::field_ref<EnumInt8&&>
   testEnum_ref() && {
      return {std::move(this->testEnum_), __isset.testEnum};
  }
  

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

 private:
  struct __isset {
    bool testEnum;
  } __isset = {};

  EnumInt8 testEnum_{EnumInt8::AAA};
};

class StructWithOptionalEnumUInt64 {
 public:

  StructWithOptionalEnumUInt64() = default;
  StructWithOptionalEnumUInt64(const StructWithOptionalEnumUInt64&) = default;
  StructWithOptionalEnumUInt64& operator=(const StructWithOptionalEnumUInt64&) = default;
  StructWithOptionalEnumUInt64(StructWithOptionalEnumUInt64&&) = default;
  StructWithOptionalEnumUInt64& operator=(StructWithOptionalEnumUInt64&&) = default;

  apache::thrift::optional_field_ref<const EnumUInt64&> testEnum() const& {
    return {this->testEnum_, __isset.testEnum};
  }
  apache::thrift::optional_field_ref<EnumUInt64&> testEnum() & {
    return {this->testEnum_, __isset.testEnum};
  }
  apache::thrift::optional_field_ref<EnumUInt64&&> testEnum() && {
     return {std::move(this->testEnum_), __isset.testEnum};
  }
  
  apache::thrift::optional_field_ref<const EnumUInt64&> testEmptyEnum() const& {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  apache::thrift::optional_field_ref<EnumUInt64&> testEmptyEnum() & {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  apache::thrift::optional_field_ref<EnumUInt64&&> testEmptyEnum() && {
     return {std::move(this->testEmptyEnum_), __isset.testEmptyEnum};
  }
  
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const EnumUInt64&>
   testEnum_ref() const& {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumUInt64&>
   testEnum_ref() & {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumUInt64&&>
   testEnum_ref() && {
      return {std::move(this->testEnum_), __isset.testEnum};
  }
  
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const EnumUInt64&>
   testEmptyEnum_ref() const& {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumUInt64&>
   testEmptyEnum_ref() & {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumUInt64&&>
   testEmptyEnum_ref() && {
      return {std::move(this->testEmptyEnum_), __isset.testEmptyEnum};
  }
  

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

 private:
  struct __isset {
    bool testEnum;
    bool testEmptyEnum;
  } __isset = {};

  EnumUInt64 testEnum_{EnumUInt64::AAA};
  EnumUInt64 testEmptyEnum_{EnumUInt64::AAA};
};

class StructWithOptionalEnumUInt32 {
 public:

  StructWithOptionalEnumUInt32() = default;
  StructWithOptionalEnumUInt32(const StructWithOptionalEnumUInt32&) = default;
  StructWithOptionalEnumUInt32& operator=(const StructWithOptionalEnumUInt32&) = default;
  StructWithOptionalEnumUInt32(StructWithOptionalEnumUInt32&&) = default;
  StructWithOptionalEnumUInt32& operator=(StructWithOptionalEnumUInt32&&) = default;

  apache::thrift::optional_field_ref<const EnumUInt32&> testEnum() const& {
    return {this->testEnum_, __isset.testEnum};
  }
  apache::thrift::optional_field_ref<EnumUInt32&> testEnum() & {
    return {this->testEnum_, __isset.testEnum};
  }
  apache::thrift::optional_field_ref<EnumUInt32&&> testEnum() && {
     return {std::move(this->testEnum_), __isset.testEnum};
  }
  
  apache::thrift::optional_field_ref<const EnumUInt32&> testEmptyEnum() const& {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  apache::thrift::optional_field_ref<EnumUInt32&> testEmptyEnum() & {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  apache::thrift::optional_field_ref<EnumUInt32&&> testEmptyEnum() && {
     return {std::move(this->testEmptyEnum_), __isset.testEmptyEnum};
  }
  
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const EnumUInt32&>
   testEnum_ref() const& {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumUInt32&>
   testEnum_ref() & {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumUInt32&&>
   testEnum_ref() && {
      return {std::move(this->testEnum_), __isset.testEnum};
  }
  
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const EnumUInt32&>
   testEmptyEnum_ref() const& {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumUInt32&>
   testEmptyEnum_ref() & {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumUInt32&&>
   testEmptyEnum_ref() && {
      return {std::move(this->testEmptyEnum_), __isset.testEmptyEnum};
  }
  

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

 private:
  struct __isset {
    bool testEnum;
    bool testEmptyEnum;
  } __isset = {};

  EnumUInt32 testEnum_{EnumUInt32::AAA};
  EnumUInt32 testEmptyEnum_{EnumUInt32::AAA};
};

class StructWithOptionalEnumUInt16 {
 public:

  StructWithOptionalEnumUInt16() = default;
  StructWithOptionalEnumUInt16(const StructWithOptionalEnumUInt16&) = default;
  StructWithOptionalEnumUInt16& operator=(const StructWithOptionalEnumUInt16&) = default;
  StructWithOptionalEnumUInt16(StructWithOptionalEnumUInt16&&) = default;
  StructWithOptionalEnumUInt16& operator=(StructWithOptionalEnumUInt16&&) = default;

  apache::thrift::optional_field_ref<const EnumUInt16&> testEnum() const& {
    return {this->testEnum_, __isset.testEnum};
  }
  apache::thrift::optional_field_ref<EnumUInt16&> testEnum() & {
    return {this->testEnum_, __isset.testEnum};
  }
  apache::thrift::optional_field_ref<EnumUInt16&&> testEnum() && {
     return {std::move(this->testEnum_), __isset.testEnum};
  }
  
  apache::thrift::optional_field_ref<const EnumUInt16&> testEmptyEnum() const& {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  apache::thrift::optional_field_ref<EnumUInt16&> testEmptyEnum() & {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  apache::thrift::optional_field_ref<EnumUInt16&&> testEmptyEnum() && {
     return {std::move(this->testEmptyEnum_), __isset.testEmptyEnum};
  }
  
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const EnumUInt16&>
   testEnum_ref() const& {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumUInt16&>
   testEnum_ref() & {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumUInt16&&>
   testEnum_ref() && {
      return {std::move(this->testEnum_), __isset.testEnum};
  }
  
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const EnumUInt16&>
   testEmptyEnum_ref() const& {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumUInt16&>
   testEmptyEnum_ref() & {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumUInt16&&>
   testEmptyEnum_ref() && {
      return {std::move(this->testEmptyEnum_), __isset.testEmptyEnum};
  }
  

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

 private:
  struct __isset {
    bool testEnum;
    bool testEmptyEnum;
  } __isset = {};

  EnumUInt16 testEnum_{EnumUInt16::AAA};
  EnumUInt16 testEmptyEnum_{EnumUInt16::AAA};
};

class StructWithOptionalEnumUInt8 {
 public:

  StructWithOptionalEnumUInt8() = default;
  StructWithOptionalEnumUInt8(const StructWithOptionalEnumUInt8&) = default;
  StructWithOptionalEnumUInt8& operator=(const StructWithOptionalEnumUInt8&) = default;
  StructWithOptionalEnumUInt8(StructWithOptionalEnumUInt8&&) = default;
  StructWithOptionalEnumUInt8& operator=(StructWithOptionalEnumUInt8&&) = default;

  apache::thrift::optional_field_ref<const EnumUInt8&> testEnum() const& {
    return {this->testEnum_, __isset.testEnum};
  }
  apache::thrift::optional_field_ref<EnumUInt8&> testEnum() & {
    return {this->testEnum_, __isset.testEnum};
  }
  apache::thrift::optional_field_ref<EnumUInt8&&> testEnum() && {
     return {std::move(this->testEnum_), __isset.testEnum};
  }
  
  apache::thrift::optional_field_ref<const EnumUInt8&> testEmptyEnum() const& {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  apache::thrift::optional_field_ref<EnumUInt8&> testEmptyEnum() & {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  apache::thrift::optional_field_ref<EnumUInt8&&> testEmptyEnum() && {
     return {std::move(this->testEmptyEnum_), __isset.testEmptyEnum};
  }
  
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const EnumUInt8&>
   testEnum_ref() const& {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumUInt8&>
   testEnum_ref() & {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumUInt8&&>
   testEnum_ref() && {
      return {std::move(this->testEnum_), __isset.testEnum};
  }
  
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const EnumUInt8&>
   testEmptyEnum_ref() const& {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumUInt8&>
   testEmptyEnum_ref() & {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumUInt8&&>
   testEmptyEnum_ref() && {
      return {std::move(this->testEmptyEnum_), __isset.testEmptyEnum};
  }
  

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

 private:
  struct __isset {
    bool testEnum;
    bool testEmptyEnum;
  } __isset = {};

  EnumUInt8 testEnum_{EnumUInt8::AAA};
  EnumUInt8 testEmptyEnum_{EnumUInt8::AAA};
};

class StructWithOptionalEnumInt64 {
 public:

  StructWithOptionalEnumInt64() = default;
  StructWithOptionalEnumInt64(const StructWithOptionalEnumInt64&) = default;
  StructWithOptionalEnumInt64& operator=(const StructWithOptionalEnumInt64&) = default;
  StructWithOptionalEnumInt64(StructWithOptionalEnumInt64&&) = default;
  StructWithOptionalEnumInt64& operator=(StructWithOptionalEnumInt64&&) = default;

  apache::thrift::optional_field_ref<const EnumInt64&> testEnum() const& {
    return {this->testEnum_, __isset.testEnum};
  }
  apache::thrift::optional_field_ref<EnumInt64&> testEnum() & {
    return {this->testEnum_, __isset.testEnum};
  }
  apache::thrift::optional_field_ref<EnumInt64&&> testEnum() && {
     return {std::move(this->testEnum_), __isset.testEnum};
  }
  
  apache::thrift::optional_field_ref<const EnumInt64&> testEmptyEnum() const& {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  apache::thrift::optional_field_ref<EnumInt64&> testEmptyEnum() & {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  apache::thrift::optional_field_ref<EnumInt64&&> testEmptyEnum() && {
     return {std::move(this->testEmptyEnum_), __isset.testEmptyEnum};
  }
  
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const EnumInt64&>
   testEnum_ref() const& {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumInt64&>
   testEnum_ref() & {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumInt64&&>
   testEnum_ref() && {
      return {std::move(this->testEnum_), __isset.testEnum};
  }
  
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const EnumInt64&>
   testEmptyEnum_ref() const& {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumInt64&>
   testEmptyEnum_ref() & {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumInt64&&>
   testEmptyEnum_ref() && {
      return {std::move(this->testEmptyEnum_), __isset.testEmptyEnum};
  }
  

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

 private:
  struct __isset {
    bool testEnum;
    bool testEmptyEnum;
  } __isset = {};

  EnumInt64 testEnum_{EnumInt64::AAA};
  EnumInt64 testEmptyEnum_{EnumInt64::AAA};
};

class StructWithOptionalEnumInt32 {
 public:

  StructWithOptionalEnumInt32() = default;
  StructWithOptionalEnumInt32(const StructWithOptionalEnumInt32&) = default;
  StructWithOptionalEnumInt32& operator=(const StructWithOptionalEnumInt32&) = default;
  StructWithOptionalEnumInt32(StructWithOptionalEnumInt32&&) = default;
  StructWithOptionalEnumInt32& operator=(StructWithOptionalEnumInt32&&) = default;

  apache::thrift::optional_field_ref<const EnumInt32&> testEnum() const& {
    return {this->testEnum_, __isset.testEnum};
  }
  apache::thrift::optional_field_ref<EnumInt32&> testEnum() & {
    return {this->testEnum_, __isset.testEnum};
  }
  apache::thrift::optional_field_ref<EnumInt32&&> testEnum() && {
     return {std::move(this->testEnum_), __isset.testEnum};
  }
  
  apache::thrift::optional_field_ref<const EnumInt32&> testEmptyEnum() const& {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  apache::thrift::optional_field_ref<EnumInt32&> testEmptyEnum() & {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  apache::thrift::optional_field_ref<EnumInt32&&> testEmptyEnum() && {
     return {std::move(this->testEmptyEnum_), __isset.testEmptyEnum};
  }
  
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const EnumInt32&>
   testEnum_ref() const& {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumInt32&>
   testEnum_ref() & {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumInt32&&>
   testEnum_ref() && {
      return {std::move(this->testEnum_), __isset.testEnum};
  }
  
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const EnumInt32&>
   testEmptyEnum_ref() const& {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumInt32&>
   testEmptyEnum_ref() & {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumInt32&&>
   testEmptyEnum_ref() && {
      return {std::move(this->testEmptyEnum_), __isset.testEmptyEnum};
  }
  

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

 private:
  struct __isset {
    bool testEnum;
    bool testEmptyEnum;
  } __isset = {};

  EnumInt32 testEnum_{EnumInt32::AAA};
  EnumInt32 testEmptyEnum_{EnumInt32::AAA};
};

class StructWithOptionalEnumInt16 {
 public:

  StructWithOptionalEnumInt16() = default;
  StructWithOptionalEnumInt16(const StructWithOptionalEnumInt16&) = default;
  StructWithOptionalEnumInt16& operator=(const StructWithOptionalEnumInt16&) = default;
  StructWithOptionalEnumInt16(StructWithOptionalEnumInt16&&) = default;
  StructWithOptionalEnumInt16& operator=(StructWithOptionalEnumInt16&&) = default;

  apache::thrift::optional_field_ref<const EnumInt16&> testEnum() const& {
    return {this->testEnum_, __isset.testEnum};
  }
  apache::thrift::optional_field_ref<EnumInt16&> testEnum() & {
    return {this->testEnum_, __isset.testEnum};
  }
  apache::thrift::optional_field_ref<EnumInt16&&> testEnum() && {
     return {std::move(this->testEnum_), __isset.testEnum};
  }
  
  apache::thrift::optional_field_ref<const EnumInt16&> testEmptyEnum() const& {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  apache::thrift::optional_field_ref<EnumInt16&> testEmptyEnum() & {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  apache::thrift::optional_field_ref<EnumInt16&&> testEmptyEnum() && {
     return {std::move(this->testEmptyEnum_), __isset.testEmptyEnum};
  }
  
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const EnumInt16&>
   testEnum_ref() const& {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumInt16&>
   testEnum_ref() & {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumInt16&&>
   testEnum_ref() && {
      return {std::move(this->testEnum_), __isset.testEnum};
  }
  
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const EnumInt16&>
   testEmptyEnum_ref() const& {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumInt16&>
   testEmptyEnum_ref() & {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumInt16&&>
   testEmptyEnum_ref() && {
      return {std::move(this->testEmptyEnum_), __isset.testEmptyEnum};
  }
  

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

 private:
  struct __isset {
    bool testEnum;
    bool testEmptyEnum;
  } __isset = {};

  EnumInt16 testEnum_{EnumInt16::AAA};
  EnumInt16 testEmptyEnum_{EnumInt16::AAA};
};

class StructWithOptionalEnumInt8 {
 public:

  StructWithOptionalEnumInt8() = default;
  StructWithOptionalEnumInt8(const StructWithOptionalEnumInt8&) = default;
  StructWithOptionalEnumInt8& operator=(const StructWithOptionalEnumInt8&) = default;
  StructWithOptionalEnumInt8(StructWithOptionalEnumInt8&&) = default;
  StructWithOptionalEnumInt8& operator=(StructWithOptionalEnumInt8&&) = default;

  apache::thrift::optional_field_ref<const EnumInt8&> testEnum() const& {
    return {this->testEnum_, __isset.testEnum};
  }
  apache::thrift::optional_field_ref<EnumInt8&> testEnum() & {
    return {this->testEnum_, __isset.testEnum};
  }
  apache::thrift::optional_field_ref<EnumInt8&&> testEnum() && {
     return {std::move(this->testEnum_), __isset.testEnum};
  }
  
  apache::thrift::optional_field_ref<const EnumInt8&> testEmptyEnum() const& {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  apache::thrift::optional_field_ref<EnumInt8&> testEmptyEnum() & {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  apache::thrift::optional_field_ref<EnumInt8&&> testEmptyEnum() && {
     return {std::move(this->testEmptyEnum_), __isset.testEmptyEnum};
  }
  
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const EnumInt8&>
   testEnum_ref() const& {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumInt8&>
   testEnum_ref() & {
    return {this->testEnum_, __isset.testEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumInt8&&>
   testEnum_ref() && {
      return {std::move(this->testEnum_), __isset.testEnum};
  }
  
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const EnumInt8&>
   testEmptyEnum_ref() const& {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumInt8&>
   testEmptyEnum_ref() & {
    return {this->testEmptyEnum_, __isset.testEmptyEnum};
  }
  FOLLY_ERASE ::apache::thrift::optional_field_ref<EnumInt8&&>
   testEmptyEnum_ref() && {
      return {std::move(this->testEmptyEnum_), __isset.testEmptyEnum};
  }
  

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

 private:
  struct __isset {
    bool testEnum;
    bool testEmptyEnum;
  } __isset = {};

  EnumInt8 testEnum_{EnumInt8::AAA};
  EnumInt8 testEmptyEnum_{EnumInt8::AAA};
};
} // namespace test
} // namespace carbon

#include "CarbonTestMessages-inl.h"
